#include <queue>
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <map>
#include <set>
#pragma GCC optimize ("O3")
#define p(n) printf("%d\n",n)
#define s(n) scanf("%d",&n)
#define fo(x,y) for(int x=0;x<y;x++)
#define pb push_back
#define disp(x) cout<<#x<<" = "<<x<<endl;
using namespace std;
const double EPS = (1e-7);
const int sz=2e5+4;
const int mod=1e9+7;
const int len=4;
typedef long long ll;
int dcmp(double x, double y) {    return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;    }
const int sbox [2][256] = {
    {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
},
{
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
    0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
    0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
    0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
    0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
    0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
    0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
    0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
    0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
    0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
    0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
    0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
}
};
const ll Rcon[10]={
    0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36
};
const int mixcol[4][4]={
    {0x02,0x03,0x01,0x01},
    {0x01,0x02,0x03,0x01},
    {0x01,0x01,0x02,0x03},
    {0x03,0x01,0x01,0x2}
};
const int invmixcol[4][4]={
    {0x0e,0x0b,0x0d,0x09},
    {0x09,0x0e,0x0b,0x0d},
    {0x0d,0x09,0x0e,0x0b},
    {0x0b,0x0d,0x09,0xe}
};
ll bin2int(vector<int>n){
    ll ret=0;
    fo(i, n.size())if(n[i])ret+=(1<<(n.size()-i-1));
    return ret;
}
void bin2hex(vector<int> x){
    fo(i,x.size()/4){
    vector<int>tmp(x.begin()+4*i,x.begin()+4*(i+1));
    cout<<uppercase<<hex<<bin2int(tmp);
    }
    cout<<endl;
}
vector<int> int2bin(ll n,int siz){
    vector<int> ret(siz);
    fo(i,siz)
    if(n>=(1LL<<(siz-i-1)))
        ret[i]=1,n-=(1LL<<(siz-i-1));
    else ret[i]=0;
    return ret;
}

vector<int> hex2bin(string p)
{
    string ap="";
    int l=p.length();
    for(int i=0;i<l;i++)
    {
        string st="";
        if(p[i]>='0'&&p[i]<='9')
        {
            int te=int(p[i])-48;
            while(te>0)
            {
                st+=char(te%2+48);
                te/=2;
            }
            while(st.length()!=4)
                st+='0';
            for(int j=3;j>=0;j--)
                ap+=st[j];
        }
        else
        {
            int te=p[i]-'A'+10;
            while(te>0)
            {
                st+=char(te%2+48);
                te/=2;
            }
            for(int j=3;j>=0;j--)
                ap+=st[j];
        }
    }
    vector<int>ret;
    fo(i,ap.size())ret.pb(ap[i]-'0');
    return ret;
}

vector<int> shiftleft(vector<int> x,int n){
    vector<int> c(x.size());
    for(int i=0;i<x.size();i++){
        c[i]=x[(i+n)%x.size()];
    }
    return c;
}

vector<int> XOR(vector<int> a, vector<int >b){
    vector<int>ret(a.size());
    fo(i,a.size())ret[i]=a[i]^b[i];
    return ret;
}
vector<int> subyte(vector<int> tmp,bool inv){
    vector<int>ret;
    fo(i,tmp.size()/4){
        vector<int>tmp2(tmp.begin()+4*i,tmp.begin()+4*(i+1));
        vector<int>tmp3(tmp.begin()+4*(i+1),tmp.begin()+4*(i+2));
        vector<int> cur=int2bin(sbox[inv][bin2int(tmp2)*16+bin2int(tmp3)],8);
        ret.insert(ret.end(), cur.begin(),cur.end());
        i++;
    }
    return ret;
}
vector<int> generateKey(vector<int> key,vector<int> rcon){
    vector<int> ret;
    vector<int> tmp(key.end()-8*4,key.end());
    tmp=shiftleft(tmp, 8);
    vector<int> sboxresult=subyte(tmp,0);
    sboxresult=XOR(sboxresult, rcon);
    vector<int> tmp3(key.begin(),key.begin()+8*4);
    tmp3=XOR(tmp3,sboxresult);
    ret.insert(ret.begin(), tmp3.begin(),tmp3.end());
    fo(i,3){
        vector<int> keyp(key.begin()+(i+1)*32,key.begin()+(i+2)*32);
        vector<int> keyc(ret.begin()+i*32,ret.begin()+(i+1)*32);
        vector<int> x=XOR(keyp,keyc);
        ret.insert(ret.end(), x.begin(),x.end());
    }
    return ret;
}
vector<vector<vector<int>>> rotate(vector<vector<vector<int>>> x,bool inv){
    vector<vector<vector<int>>> ret(4,vector<vector<int>>(4,vector<int>()));
    fo(i,4)
    fo(j,4){
        if(inv)
            ret[i][(i+j)%4]=x[i][j];
        else
            ret[i][j]=x[i][(i+j)%4];
    }
    return ret;
}
vector<int> shiftmul(vector<int> a,int n){
    while(n--){
        if(a[0]==0)a=shiftleft(a, 1);
        else {
            a[0]=0;
            a=XOR(hex2bin("1B"),shiftleft(a, 1));
        }
    }
    return a;
}

vector<int> mult(vector<int>a, vector<int> b){
    vector<int> ret(8);
    fo(i,b.size()){
        if(b[i]==1)
            ret=XOR(ret,shiftmul(a, (int)b.size()-i-1));
    }
    return ret;
}

vector<vector<vector<int>>> mixcolumns(vector<vector<vector<int>>> x,bool inv){
    vector<vector<vector<int>>> ret(4,vector<vector<int>>(4,vector<int>()));
    fo(i,4)
    fo(j,4){
        vector<int> cur=hex2bin("00");
        fo(k,4){
            vector<int> tmp;
            if(inv)tmp=mult(x[k][j],int2bin(invmixcol[i][k],8));
            else tmp=mult(x[k][j],int2bin(mixcol[i][k],8));
            cur=XOR(cur,tmp);
        }
        ret[i][j]=cur;
    }
    return ret;
}
vector<vector<vector<int>>> tostate(vector<int> ret){
    vector<vector<vector<int>>> state(4,vector<vector<int>>(4,vector<int>()));
    int cnt=0;
    fo(i,4)
    fo(j,4){
        state[j][i].insert(state[j][i].end(), ret.begin()+cnt*8,ret.begin()+(cnt+1)*8);
        cnt++;
    }
    return state;
}
vector<int> fromstate(vector<vector<vector<int>>> state){
    vector<int> ret;
    fo(i,4)
    fo(j,4)
    ret.insert(ret.end(), state[j][i].begin(),state[j][i].end());
    return ret;
}
vector<int > round(vector<int> x,vector<int>key,bool last){
    vector<int > ret=subyte(x,0);
    vector<vector<vector<int>>> state=tostate(ret);
    state=rotate(state,0);
    if(!last)
        state=mixcolumns(state,0);
    ret=fromstate(state);
    ret=XOR(ret,key);
    return ret;
}
vector<int> invRound(vector<int> x ,vector<int> key, bool last){
    vector<vector<vector<int>>> state=tostate(x);
    state=rotate(state,1);
    vector<int> ret=fromstate(state);
    ret=subyte(ret, 1);
    ret=XOR(ret,key);
    if(!last){
        state=tostate(ret);
        state=mixcolumns(state,1);
        ret=fromstate(state);
    }
    return ret;
}
vector<int> encDec(vector<int> pt,string ke,bool dec){
    vector<vector<int>>keys(11);
    vector<int > cipher;
    keys[0]=hex2bin(ke);
    fo(i,10)
    keys[i+1]=generateKey(keys[i], int2bin((Rcon[i]<<24), 32));
    if(dec)
        reverse(keys.begin(), keys.end());
    fo(i,11){
        if(i==0)
        {
            cipher=XOR(keys[i], pt);
            continue;
        }
        if(!dec) cipher=round(cipher,keys[i],i==10);
        else cipher=invRound(cipher,keys[i],i==10);
    }
    return cipher;
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    while(1){
    string p,ke;
    cout<<"Enter 32 Hex character key: \n";
    cin>>ke;
    cout<<"Enter 32 Hex character text: \n";
    cin>>p;
    cout<<"Enter 1 for Encryption, 0 for Decryption: \n";
    bool dec;
    cin>>dec;
    vector<int> pt=hex2bin(p);
    vector<int> cipher=encDec(pt,ke,!dec);
    bin2hex(cipher);
    }
    return 0;
}
